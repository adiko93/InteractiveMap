### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

type Entity {
  color: String
  createdAt: DateTime
  createdBy: User
  createdById: String
  description: String
  folder: Folder
  icon: String
  id: String
  image: String
  name: String
  position: Json
  type: EntityType
  updatedAt: DateTime
  updatedBy: User
  updatedById: String
}

"""Types of entities"""
enum EntityType {
  AREA
  MARKER
  PATH
}

type Folder {
  childs: [Folder]
  color: String
  description: String
  entities: [Entity]
  icon: String
  id: String
  map: Map
  mapId: String
  mapRoot: Map
  name: String
  parent: Folder
  parentId: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Map {
  color: String
  createdBy: User
  createdById: String
  description: String
  editors: [User]
  folders: [Folder]
  icon: String
  id: String
  name: String
  rootFolder: Folder
  users: [User]
}

type Mutation {
  createEntity(color: String!, description: String, folder: ID!, icon: String!, image: String, name: String!, position: Json!, type: EntityType!): Entity
  createFolder(color: String!, icon: String!, name: String!, parentFolder: ID!): Folder
  createUser(password: String!, username: String!): User
  deleteEntity(id: ID!): Entity
  deleteFolder(folderId: ID!): Folder
}

type Query {
  folder(id: String!): Folder
  folders(ids: [String!]!): [Folder]!
  map(id: String!): Map
  maps: [Map]!
  me: User
}

type User {
  createdAt: DateTime
  editorAt: [Map]
  email: String
  id: String
  image: String
  mapsCreated: [Map]
  name: String
  userAt: [Map]
  username: String
}